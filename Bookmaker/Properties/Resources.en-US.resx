<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddMatch" xml:space="preserve">
    <value>Add match</value>
  </data>
  <data name="AddTeam" xml:space="preserve">
    <value>Add team</value>
  </data>
  <data name="All" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="AnnounceMatchResult" xml:space="preserve">
    <value>Announce match result</value>
  </data>
  <data name="Authorization" xml:space="preserve">
    <value>Authorization</value>
  </data>
  <data name="Avatar" xml:space="preserve">
    <value>Avatar</value>
  </data>
  <data name="Back" xml:space="preserve">
    <value>Back</value>
  </data>
  <data name="BetOn" xml:space="preserve">
    <value>Bet on</value>
  </data>
  <data name="BetState" xml:space="preserve">
    <value>Bet's state</value>
  </data>
  <data name="Bookmaker" xml:space="preserve">
    <value>Bookmaker</value>
  </data>
  <data name="BookmakerNotifier" xml:space="preserve">
    <value>Bookmaker Notifier</value>
  </data>
  <data name="CancelBet" xml:space="preserve">
    <value>Cancel bet</value>
  </data>
  <data name="CardId" xml:space="preserve">
    <value>Card id</value>
  </data>
  <data name="Cash" xml:space="preserve">
    <value>Cash</value>
  </data>
  <data name="ChangePassword" xml:space="preserve">
    <value>Change password</value>
  </data>
  <data name="ChangeTheme" xml:space="preserve">
    <value>Change theme</value>
  </data>
  <data name="ChangeUserData" xml:space="preserve">
    <value>Change user data</value>
  </data>
  <data name="Code" xml:space="preserve">
    <value>Code</value>
  </data>
  <data name="Coefficient" xml:space="preserve">
    <value>Coefficient</value>
  </data>
  <data name="CoefficientOnFirstTeam" xml:space="preserve">
    <value>Coefficient on first team</value>
  </data>
  <data name="CoefficientOnSecondTeam" xml:space="preserve">
    <value>Coefficient on second team</value>
  </data>
  <data name="DateOfBet" xml:space="preserve">
    <value>Date of bet</value>
  </data>
  <data name="DeleteMatch" xml:space="preserve">
    <value>Delete match</value>
  </data>
  <data name="DeleteTeam" xml:space="preserve">
    <value>Delete team</value>
  </data>
  <data name="DeleteUser" xml:space="preserve">
    <value>Delete user</value>
  </data>
  <data name="Email" xml:space="preserve">
    <value>Email</value>
  </data>
  <data name="EmailExists" xml:space="preserve">
    <value>This email is already registered</value>
  </data>
  <data name="En" xml:space="preserve">
    <value>En</value>
  </data>
  <data name="EnterNewPassword" xml:space="preserve">
    <value>Enter new password</value>
  </data>
  <data name="EnterRecoveryCode" xml:space="preserve">
    <value>Enter recovery code</value>
  </data>
  <data name="EnterYourCash" xml:space="preserve">
    <value>Enter your cash</value>
  </data>
  <data name="EnterYourEmail" xml:space="preserve">
    <value>Enter your email</value>
  </data>
  <data name="FirstName" xml:space="preserve">
    <value>First name</value>
  </data>
  <data name="FirstTeam" xml:space="preserve">
    <value>First team</value>
  </data>
  <data name="ForgotYourPassword" xml:space="preserve">
    <value>Forgot your password?</value>
  </data>
  <data name="HaveAnAccount" xml:space="preserve">
    <value>Have an account?</value>
  </data>
  <data name="Id" xml:space="preserve">
    <value>Id</value>
  </data>
  <data name="IncorrectPassword" xml:space="preserve">
    <value>Invalid password, it can consist of 6-32 letters, numbers and *</value>
  </data>
  <data name="IncorrectPasswordOrLogin" xml:space="preserve">
    <value>Incorrect password or login</value>
  </data>
  <data name="IsAdministrator" xml:space="preserve">
    <value>Is administrator</value>
  </data>
  <data name="IsBlocked" xml:space="preserve">
    <value>Is blocked</value>
  </data>
  <data name="KindOfSport" xml:space="preserve">
    <value>Kind of sport</value>
  </data>
  <data name="LastName" xml:space="preserve">
    <value>Last name</value>
  </data>
  <data name="LoadPassportPhoto" xml:space="preserve">
    <value>Load passport's photo</value>
  </data>
  <data name="Login" xml:space="preserve">
    <value>Login</value>
  </data>
  <data name="Logotype" xml:space="preserve">
    <value>Logotype</value>
  </data>
  <data name="Logout" xml:space="preserve">
    <value>Logout</value>
  </data>
  <data name="MakeABet" xml:space="preserve">
    <value>Make a bet</value>
  </data>
  <data name="Match" xml:space="preserve">
    <value>Match</value>
  </data>
  <data name="MatchDeleted" xml:space="preserve">
    <value>Match deleted</value>
  </data>
  <data name="Matches" xml:space="preserve">
    <value>Matches</value>
  </data>
  <data name="MatchId" xml:space="preserve">
    <value>Match Id</value>
  </data>
  <data name="MatchResult" xml:space="preserve">
    <value>Match result</value>
  </data>
  <data name="MatchResultAnnounced" xml:space="preserve">
    <value>Match results have been announced</value>
  </data>
  <data name="Ok" xml:space="preserve">
    <value>Ok</value>
  </data>
  <data name="OutputMoney" xml:space="preserve">
    <value>Output money</value>
  </data>
  <data name="PassportData" xml:space="preserve">
    <value>Passport data</value>
  </data>
  <data name="PassportExists" xml:space="preserve">
    <value>This passport is already registered</value>
  </data>
  <data name="PassportID" xml:space="preserve">
    <value>Passport id</value>
  </data>
  <data name="PassportPhoto" xml:space="preserve">
    <value>Passport's photo</value>
  </data>
  <data name="Password" xml:space="preserve">
    <value>Password</value>
  </data>
  <data name="PasswordChanged" xml:space="preserve">
    <value>Password changed</value>
  </data>
  <data name="Patronymic" xml:space="preserve">
    <value>Patronymic</value>
  </data>
  <data name="PhoneNumber" xml:space="preserve">
    <value>Phone number</value>
  </data>
  <data name="PutMoney" xml:space="preserve">
    <value>Put money</value>
  </data>
  <data name="PutOutputMoney" xml:space="preserve">
    <value>Put and output money</value>
  </data>
  <data name="Refresh" xml:space="preserve">
    <value>Refresh</value>
  </data>
  <data name="Register" xml:space="preserve">
    <value>Register</value>
  </data>
  <data name="RegisterDate" xml:space="preserve">
    <value>Date of registration</value>
  </data>
  <data name="Registration" xml:space="preserve">
    <value>Registration</value>
  </data>
  <data name="Result" xml:space="preserve">
    <value>Result</value>
  </data>
  <data name="SaveChanges" xml:space="preserve">
    <value>Save changes</value>
  </data>
  <data name="Search" xml:space="preserve">
    <value>Search</value>
  </data>
  <data name="SearchByUserName" xml:space="preserve">
    <value>Search by UserName</value>
  </data>
  <data name="SecondTeam" xml:space="preserve">
    <value>Second team</value>
  </data>
  <data name="SelectedAccountDeleted" xml:space="preserve">
    <value>Selected account has been deleted</value>
  </data>
  <data name="SelectImage" xml:space="preserve">
    <value>Select image</value>
  </data>
  <data name="Send" xml:space="preserve">
    <value>Send</value>
  </data>
  <data name="Settings" xml:space="preserve">
    <value>Settings</value>
  </data>
  <data name="StartDate" xml:space="preserve">
    <value>Date of start</value>
  </data>
  <data name="String1" xml:space="preserve">
    <value />
  </data>
  <data name="TeamDeleted" xml:space="preserve">
    <value>Team has been deleted</value>
  </data>
  <data name="TeamExists" xml:space="preserve">
    <value>Team already exists</value>
  </data>
  <data name="TeamName" xml:space="preserve">
    <value>Team name</value>
  </data>
  <data name="TeamsList" xml:space="preserve">
    <value>A list of teams</value>
  </data>
  <data name="UserBlocked" xml:space="preserve">
    <value>User is blocked</value>
  </data>
  <data name="UserCannotBeDeleted" xml:space="preserve">
    <value>User cannot be deleted</value>
  </data>
  <data name="UserData" xml:space="preserve">
    <value>User data</value>
  </data>
  <data name="UserDeleted" xml:space="preserve">
    <value>User deleted</value>
  </data>
  <data name="UserIsNotFound" xml:space="preserve">
    <value>User is not found</value>
  </data>
  <data name="UserName" xml:space="preserve">
    <value>User name</value>
  </data>
  <data name="UserNameExists" xml:space="preserve">
    <value>A user with the same name already exists</value>
  </data>
  <data name="UsersList" xml:space="preserve">
    <value>A list of users</value>
  </data>
  <data name="Verify" xml:space="preserve">
    <value>Verify</value>
  </data>
  <data name="Verifying" xml:space="preserve">
    <value>Verifying</value>
  </data>
  <data name="VS" xml:space="preserve">
    <value>VS</value>
  </data>
  <data name="WinDefUndef" xml:space="preserve">
    <value>Win/Defeat/Undefined</value>
  </data>
  <data name="WinRate" xml:space="preserve">
    <value>Win rate</value>
  </data>
  <data name="YourAccountDeleted" xml:space="preserve">
    <value>Your account has been deleted</value>
  </data>
  <data name="YourBets" xml:space="preserve">
    <value>Your bets</value>
  </data>
</root>